generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  username      String     @unique
  firstName     String
  lastName      String
  email         String     @unique
  password      String
  isSuperUser   Boolean    @default(false)
  isCapper      Boolean?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  subscriptions Capper[]   @relation("UserSubscriptions", fields: [subscribedToIds], references: [id])
  subscribedToIds String[] @db.ObjectId
  capperProfile Capper?
  imageUrl      String?
  stripeConnectId        String?   // For Cappers' Stripe Connect accounts
  stripeConnectOnboarded Boolean   @default(false)
  payoutEnabled         Boolean   @default(false)
  stripeConnectCountry  String?   
  likedPosts        PostLike[]
  resetToken       String?
  resetTokenExpiry DateTime?
  capperApplications CapperApplication[]

  Subscription Subscription[]
}


// The cappers should only refer to the username from the user model. 
model Capper {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @unique @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  bio           String?
  title         String?         // Professional title
  imageUrl      String?         // Profile image
  socialLinks   Json?           // Store social links as JSON
  tags          String[]        // Keep existing tags
  subscribers   User[]          @relation("UserSubscriptions", fields: [subscriberIds], references: [id])
  subscriberIds String[]       @db.ObjectId
  posts         CapperPost[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subscriptions Subscription[]
  profileImage  String?
}
  
// TODO: Add SEO friendly fields. 

// TODO: Add right parameters for capper post 
model CapperPost {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  imageUrl      String?
  tags          String[]
  bets          String[]
  odds          String[]
  bookmaker     String?  // Add this field
  capperId      String   @db.ObjectId
  productId     String?   // Add this field to link post to a specific product
  // productId     String   @default("default_product")
  capper        Capper   @relation(fields: [capperId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  likes         Int      @default(0)
  comments      Int      @default(0)
  likedBy       PostLike[]

  @@index([capperId])
  @@index([productId])
}

model Subscription {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  userId               String    @db.ObjectId
  capperId             String    @db.ObjectId
  productId            String    // Store the specific bundle/product ID
  priceId              String    // Store the price ID for the bundle
  status               String    // "active" or "cancelled"
  subscribedAt         DateTime  @default(now())
  expiresAt            DateTime? // Add expiration date
  cancelledAt          DateTime? // Add this field
  capper               Capper    @relation(fields: [capperId], references: [id])
  user                 User      @relation(fields: [userId], references: [id])
  stripeSubscriptionId String?
  stripeCustomerId     String?   // Add this field
}

model PostLike {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  postId    String     @db.ObjectId
  createdAt DateTime   @default(now())
  post      CapperPost @relation(fields: [postId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model CapperApplication {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  sport           String
  experience      String
  monthlyBetAmount String
  yearlyROI       String
  roiVerificationImages String[]
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}
  