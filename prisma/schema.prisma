generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  username      String     @unique
  firstName     String
  lastName      String
  email         String     @unique
  password      String
  isCapper      Boolean?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  subscriptions Capper[]   @relation("UserSubscriptions", fields: [subscribedToIds], references: [id])
  subscribedToIds String[] @db.ObjectId
  capperProfile Capper?
  imageUrl      String?
}


// The cappers should only refer to the username from the user model. 
model Capper {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @unique @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  bio           String?
  title         String?         // Professional title
  imageUrl      String?         // Profile image
  socialLinks   Json?           // Store social links as JSON
  tags          String[]        // Keep existing tags
  subscribers   User[]          @relation("UserSubscriptions", fields: [subscriberIds], references: [id])
  subscriberIds String[]       @db.ObjectId
  posts         CapperPost[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subscriptions Subscription[]
}
  
// TODO: Add SEO friendly fields. 

// TODO: Add right parameters for capper post 
model CapperPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  imageUrl  String?  // Optional field for storing image URL
  tags      String[]
  bets      String[]
  odds      String[]
  capperId  String   @db.ObjectId
  capper    Capper   @relation(fields: [capperId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  capperId    String   @db.ObjectId
  status      String   @default("active")
  subscribedAt DateTime @default(now())
  cancelledAt DateTime?
  capper      Capper   @relation(fields: [capperId], references: [id])

  @@index([userId])
  @@index([capperId])
}
  